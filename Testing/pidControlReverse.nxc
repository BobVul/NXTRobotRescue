/* Written on 5/05/2013
   Used purely for testing, and to obtain
   a greater knowledge of pid
*/

//Increasing MAX_SPEED leads to wider turns
#define MAX_SPEED 50

//Error is related to how high from the ground the light sensor is
//A higher light sensor causes a greater error
#define MAX_ERROR 5 

//This constant is used to determine the change in motor speed.
//A higher KPROPORTIONAL value leads to a wider sweep (presumably --> testing required)
//KPROPROTIONAL should never be such that MAX_SPEED - MAX_ERROR*KPROPORTIONAL < 0
//For a sharp turn, MAX_SPEED - MAX_ERROR*KPROPORTIONAL should be around 0.
#define KPROPORTIONAL 10

//This constaint is relatively high, as this version resets
//integral when error changes signs
//A high KINTEGRAL should allow for a faster curve turn when reseting
//integral, but might cause too much oscillation in a straight line
//Testing needed to confirm the above
#define KINTEGRAL 1

//This constant simply aids in increasing speed when turning,
//and reducing motor power over time when going in a straight line
//Note: While KDERIVATIVE works well with OnFwd for a straight line,
//it likely will not work well for curves without both OnFwd and OnRev
#define KDERIVATIVE 100

#define LEFT_MOTOR OUT_A
#define RIGHT_MOTOR OUT_B
#define LIGHT_SENSOR IN_1

task main()
{
	SetSensorLight(LIGHT_SENSOR);
	byte initialReading = Sensor(LIGHT_SENSOR);
	byte error, prevError;
	prevError = 0;
	float integral = 0;
	float derivative = 0;
	float turnPower;
	while (true) {
		error = Sensor(LIGHT_SENSOR) - initialReading;
		
		//check if integral and error have different signs
		if ((integral > 0 && error < 0) || (integral < 0 && error > 0))
			integral = 0;
		else
			integral += error;
			
		derivative = error - prevError;
		
		if (error > MAX_ERROR) error = MAX_ERROR;
		if (error < (-MAX_ERROR)) error = -MAX_ERROR;
		turnPower = error*KPROPORTIONAL + integral*KINTEGRAL + derivative*KDERIVATIVE;
		if (turnPower > 0) {
			OnFwd(RIGHT_MOTOR, turnPower);
			OnRev(LEFT_MOTOR, turnPower);
		} else if (turnPower < 0) {
			OnFwd(LEFT_MOTOR, turnPower);
			OnRev(RIGHT_MOTOR, turnPower);
		} else
			OnFwd(BOTH_MOTORS, turnPower);
	}
}