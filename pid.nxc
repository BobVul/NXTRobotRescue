// Assuming a motor range of 50 (MOTOR_BASE_POWER +/- 25)
// and a total error range of 5 (errorOffset +/- 2.5).
// 50 / 5 = 10 <= max turn at max error
// Ku is 30
//#define KProportional 18
// oscillation period with Kp of 30 is 0.3 seconds (300 ms)
//#define KIntegral 0.12
//#define KDerivative 675

#define KProportional 15
#define KIntegral 0.2
#define KDerivative 500

#define LEFT_MOTOR OUT_A
#define RIGHT_MOTOR OUT_C
#define RIGHT_FWD(x) OnFwd(RIGHT_MOTOR, x)
#define RIGHT_REV(x) OnRev(RIGHT_MOTOR, x)
#define LEFT_FWD(x) OnFwd(LEFT_MOTOR, x)
#define LEFT_REV(x) OnRev(LEFT_MOTOR, x)

#define MOTOR_BASE_POWER 50

#define LEFT_LIGHT_SENSOR IN_4
#define TOUCH_SENSOR IN_2

#define MAX_LIGHT 100
#define MIN_LIGHT 0
#define CONSTANT_ERROR_MARGIN 3

void findErrorOffset(void);
void runPidController(void);
int max(int a, int b);
int min(int a, int b);

int errorOffset;
int lightMaximum;
int lightMinimum;

bool targetFound = false;

task touchSensor() {
    while (true) {
        if (Sensor(TOUCH_SENSOR)) {
            targetFound = true;
            PlayTone(TONE_A4, 1000);
            Wait(1000);
            break;
        }
    }
}

task main() {
    SetSensorLight(LEFT_LIGHT_SENSOR);
    SENSOR_TYPE_LIGHT_ACTIVE;
    
    SetSensorTouch(TOUCH_SENSOR);

    start touchSensor;
    
    findErrorOffset();
    
    runPidController();
}

// Find the 'average' error at the edge of the line.
// Assumes the bot is started facing right of the line, and implements a left hand follower.
void findErrorOffset(void) {
    lightMaximum = MIN_LIGHT;
    lightMinimum = MAX_LIGHT;
    int currentLight = Sensor(LEFT_LIGHT_SENSOR);
    
    RIGHT_FWD(MOTOR_BASE_POWER);
    LEFT_REV(MOTOR_BASE_POWER);
    
    // Assuming started on white, scan left while it's as dark as the darkest
    // it has been (i.e. has not gone over the line to the other side). Allow
    // for some error for shadows.
    while ((currentLight - CONSTANT_ERROR_MARGIN) <= lightMinimum) {
        lightMaximum = max(lightMaximum, currentLight);
        lightMinimum = min(lightMinimum, currentLight);
        currentLight = Sensor(LEFT_LIGHT_SENSOR);
    }
    
    Off(LEFT_MOTOR);
    Off(RIGHT_MOTOR);
    
    errorOffset = (lightMaximum + lightMinimum) / 2;
    
    TextOut(1, LCD_LINE1, "Lightest:");
    NumOut(50, LCD_LINE1, lightMaximum);
    TextOut(1, LCD_LINE2, "Darkest:");
    NumOut(50, LCD_LINE2, lightMinimum);
    TextOut(1, LCD_LINE3, "Average:");
    NumOut(50, LCD_LINE3, errorOffset);
}

void runPidController(void) {
    int currentLight;
    int previousError, currentError;
    int motorDifference;
    int leftPower, rightPower;
    int integral = 0;
    int derivative = 0;
    unsigned long previousTime, currentTime, timeDifference;
    previousTime = CurrentTick();
    while (!targetFound) {
        currentLight = Sensor(LEFT_LIGHT_SENSOR);
        
        currentTime = CurrentTick();
        timeDifference = currentTime - previousTime;
        
        currentError = currentLight - errorOffset;
        if ((integral < 0 && currentError > 0) || (integral > 0 && currentError < 0)) {
           // reset error whenever it crosses to the other side
           integral = 0;
        }
        if (!(currentError < lightMinimum + CONSTANT_ERROR_MARGIN || currentError > lightMaximum - CONSTANT_ERROR_MARGIN)) {
            // only set integral if it's a smallish error
            integral = integral + currentError * timeDifference;
        }
        derivative = currentError - previousError;
        motorDifference = KProportional * currentError + KIntegral * integral + KDerivative * derivative;
        
        // left hand folllwer, positive when too far left
        // must turn right when positive, therefore left
        // wheel should be more powerful when positive
        leftPower = max(-100, min(100, MOTOR_BASE_POWER + motorDifference));
        rightPower = max(-100, min(100, MOTOR_BASE_POWER - motorDifference));
        
        LEFT_FWD(leftPower);
        RIGHT_FWD(rightPower);
        
        previousError = currentError;
        previousTime = currentTime;
    }
    
    Off(LEFT_MOTOR);
    Off(RIGHT_MOTOR);
}

int max(int a, int b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

int min(int a, int b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}